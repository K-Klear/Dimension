local lights = {}
local no_colour = vmath.vector4(0)

local STATE_STAND = hash("stand")
local STATE_RUN_LEFT = hash("run_left")
local STATE_RUN_RIGHT = hash("run_right")
local STATE_RUN = hash("run")
local STATE_JUMP = hash("jump")
local STATE_JUMP_START = hash("jump_start")
local STATE_TURN = hash("turn")
local STATE_FALL = hash("fall")
local state = STATE_STAND
local facing = 1
local current_position
local reset_state
local state_timer
local touching_ladder = false

local GRAVITY = 0.5

local collision_vector_x = vmath.vector3(32, 0, 0)
local collision_vector_y = vmath.vector3(0, 32, 0)

local movement_vector = vmath.vector3(0, 0, 0)

local INPUT = {}

local sprite_animations = {
	[1] = {run = "run_right", stand = "stand_right", jump = "jump_right", turn = "turn_right", climb = "climb_right", ladder = "ladder"},
	[-1] = {run = "run_left", stand = "stand_left", jump = "jump_left", turn = "turn_left", climb = "climb_left", ladder = "ladder"}
}

local function get_run_speed(distance)
	return distance / 256
	--return distance / 192 
end

function init(self)
	msg.post(".", "acquire_input_focus")
	--go.set_parent("camera", ".", true)
	current_position = go.get_world_position()
end

local state_reset_fn = {}
function state_reset_fn.run()
	current_position.x = math.ceil((current_position.x - 16) / 32) * 32
	go.cancel_animations(".", "position.x")
	go.set(".", "position.x", current_position.x)
	state = STATE_STAND
end
function state_reset_fn.run_turn_right()
	current_position.x = math.ceil((current_position.x - 16) / 32) * 32
	go.cancel_animations(".", "position.x")
	go.set(".", "position.x", current_position.x)
	sprite.play_flipbook("#sprite", sprite_animations[1].run)
	state = STATE_STAND
end
function state_reset_fn.run_turn_left()
	current_position.x = math.ceil((current_position.x - 16) / 32) * 32
	go.cancel_animations(".", "position.x")
	go.set(".", "position.x", current_position.x)
	sprite.play_flipbook("#sprite", sprite_animations[-1].run)
	state = STATE_STAND
end
function state_reset_fn.turn()
	state = STATE_STAND
end
function state_reset_fn.ladder()
	current_position.y = math.ceil((current_position.y - 16) / 32) * 32
	go.cancel_animations(".", "position.y")
	go.set(".", "position.y", current_position.y)
	state = STATE_STAND
end
function state_reset_fn.walk()

end



local function set_state_timer(duration, fn)
	if state_timer then
		timer.cancel(state_timer)
	end
	state_timer = timer.delay(duration, false, state_reset_fn[fn])
end

local function update_lights()
	local pos = go.get_world_position("camera")
	if #lights > 2 then
		table.sort(lights, function(a, b) return vmath.length_sqr(pos - a.pos) < vmath.length_sqr(pos - b.pos) end)
	end
	local light_dir = vmath.vector4()
	if lights[1] then
		go.set("#sprite", "light_col_1", lights[1].colour)
		light_dir.x = lights[1].pos.x - pos.x + 480
		light_dir.y = lights[1].pos.y - pos.y + 320
		if lights[2] then
			go.set("#sprite", "light_col_2", lights[2].colour)
			light_dir.z = lights[2].pos.x
			light_dir.w = lights[2].pos.y
		end
	else
		go.set("#sprite", "light_col_1", no_colour)
	end
	go.set("#sprite", "light_direction", light_dir)
end

function update(self, dt)
	local touching_ground = physics.raycast(current_position, current_position - collision_vector_y, {hash("ground")})
	current_position = go.get_world_position(".")
	if state == STATE_STAND then
		if INPUT[hash("key_up")] then
			local blocked_above = physics.raycast(current_position, current_position + collision_vector_y, {hash("ground")})
			if touching_ladder and not blocked_above then
				local duration = get_run_speed(32) * 2
				go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, current_position.y + 32, go.EASING_LINEAR, duration)
				state = STATE_LADDER
				sprite.play_flipbook("#sprite", sprite_animations[facing].ladder)
				set_state_timer(duration, "ladder")
			elseif touching_ground and not blocked_above then
				local ray = physics.raycast(current_position, current_position + collision_vector_x * facing, {hash("ground")})
				local ray_2 = physics.raycast(current_position + collision_vector_y * 2, current_position + collision_vector_y * 2 + collision_vector_x * facing, {hash("ground")})
				if ray and not ray_2 then
					local duration = get_run_speed(64)
					go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, current_position.x + 64 * facing, go.EASING_INSINE, duration)
					go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, current_position.y + 64, go.EASING_OUTSINE, duration)
					state = STATE_RUN
					sprite.play_flipbook("#sprite", sprite_animations[facing].climb)
					set_state_timer(duration, "run")
				elseif movement_vector.x == 0 then
					movement_vector.y = 9
					go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, current_position.x + 128 * facing, go.EASING_LINEAR, get_run_speed(128) * 1.1)
					state = STATE_FALL
					touching_ground = false
					sprite.play_flipbook("#sprite", sprite_animations[facing].jump)
				else
					movement_vector.y = 12
					go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, current_position.x + 256 * facing, go.EASING_LINEAR, get_run_speed(256) * 1)
					state = STATE_FALL
					touching_ground = false
					sprite.play_flipbook("#sprite", sprite_animations[facing].jump)
					movement_vector.x = facing
				end
			end
		elseif INPUT[hash("key_down")] and touching_ladder then
			local blocked_below = physics.raycast(current_position, current_position - collision_vector_y, {hash("ground")})
			if not blocked_below then
				local duration = get_run_speed(32) * 2
				go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, current_position.y - 32, go.EASING_LINEAR, duration)
				state = STATE_LADDER
				sprite.play_flipbook("#sprite", sprite_animations[facing].ladder)
				set_state_timer(duration, "ladder")
			end
		elseif INPUT[hash("key_right")] then
			if facing < 0 then
				if movement_vector.x == 0 then
					facing = 1
					sprite.play_flipbook("#sprite", sprite_animations[facing].turn)
					state = STATE_TURN
					set_state_timer(0.5, "turn")
					movement_vector.x = 0
				elseif movement_vector.x == -1 then
					facing = 1
					state = STATE_TURN
					sprite.play_flipbook("#sprite", sprite_animations[facing].turn)
					set_state_timer(0.5, "turn")
					movement_vector.x = 0
				elseif movement_vector.x == -2 then
					if physics.raycast(current_position, current_position - collision_vector_x, {hash("ground")}) then
						sprite.play_flipbook("#sprite", sprite_animations[facing].stand)
						movement_vector.x = 0
					else
						local duration = get_run_speed(32)
						go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, current_position.x - 32, go.EASING_LINEAR, duration)
						set_state_timer(0.5, "run_turn_right")
						facing = 1
						movement_vector.x = 1
						state = STATE_RUN
						sprite.play_flipbook("#sprite", sprite_animations[facing].turn)
					end
				end
			elseif physics.raycast(current_position, current_position + collision_vector_x, {hash("ground")}) then
				sprite.play_flipbook("#sprite", sprite_animations[facing].stand)
				movement_vector.x = 0
			elseif movement_vector.x == 0 then
				movement_vector.x = 1
				facing = 1
				state = STATE_RUN
				sprite.play_flipbook("#sprite", sprite_animations[facing].run)
				local duration = get_run_speed(32)
				go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, current_position.x + 32, go.EASING_LINEAR, duration)
				set_state_timer(duration, "run")
			elseif movement_vector.x == 1 then
				movement_vector.x = 2
				state = STATE_RUN
				local duration = get_run_speed(32)
				go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, current_position.x + 32, go.EASING_LINEAR, duration)
				set_state_timer(duration, "run")
			else
				state = STATE_RUN
				local duration = get_run_speed(32)
				go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, current_position.x + 32, go.EASING_LINEAR, duration)
				set_state_timer(duration, "run")
			end
		elseif INPUT[hash("key_left")] then
			if facing > 0 then
				if movement_vector.x == 0 then
					facing = -1
					sprite.play_flipbook("#sprite", sprite_animations[facing].turn)
					state = STATE_TURN
					set_state_timer(0.5, "turn")
					movement_vector.x = 0
				elseif movement_vector.x == 1 then
					facing = -1
					state = STATE_TURN
					sprite.play_flipbook("#sprite", sprite_animations[facing].turn)
					set_state_timer(0.5, "turn")
					movement_vector.x = 0
				elseif movement_vector.x == 2 then
					if physics.raycast(current_position, current_position + collision_vector_x, {hash("ground")}) then
						sprite.play_flipbook("#sprite", sprite_animations[facing].stand)
						movement_vector.x = 0
					else
						go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, current_position.x + 32, go.EASING_LINEAR, get_run_speed(32))
						set_state_timer(0.5, "run_turn_left")
						facing = -1
						movement_vector.x = -1
						state = STATE_RUN
						sprite.play_flipbook("#sprite", sprite_animations[facing].turn)
					end
				end
			elseif physics.raycast(current_position, current_position - collision_vector_x, {hash("ground")}) then
				sprite.play_flipbook("#sprite", sprite_animations[facing].stand)
				movement_vector.x = 0
			elseif movement_vector.x == 0 then
				movement_vector.x = -1
				facing = -1
				state = STATE_RUN
				sprite.play_flipbook("#sprite", sprite_animations[facing].run)
				local duration = get_run_speed(32)
				go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, current_position.x - 32, go.EASING_LINEAR, duration)
				set_state_timer(duration, "run")
			elseif movement_vector.x == -1 then
				movement_vector.x = -2
				state = STATE_RUN
				local duration = get_run_speed(32)
				go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, current_position.x - 32, go.EASING_LINEAR, duration)
				set_state_timer(duration, "run")
			else
				state = STATE_RUN
				local duration = get_run_speed(32)
				go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD, current_position.x - 32, go.EASING_LINEAR, duration)
				set_state_timer(duration, "run")
			end
		else
			sprite.play_flipbook("#sprite", sprite_animations[facing].stand)
			movement_vector.x = 0
		end
	elseif state == STATE_FALL then
		local ray = physics.raycast(current_position, current_position + collision_vector_x * facing, {hash("ground")})
		if ray then
			go.cancel_animations(".", "position.x")
			current_position.x = ray.position.x - 32 * facing
		end
	end

	movement_vector.y = movement_vector.y - GRAVITY
	local stop_falling = false
	if movement_vector.y > 0 then
		local ray = physics.raycast(current_position, current_position + collision_vector_y, {hash("ground")})
		if ray then
			movement_vector.y = current_position.y - (ray.position.y - 32)
			stop_falling = true
		end
	elseif movement_vector.y < 0 then
		if touching_ladder then
			movement_vector.y = 0
			stop_falling = true
		else
			local vec = vmath.vector3(current_position)
			vec.y = vec.y + movement_vector.y
			local ray = physics.raycast(vec, vec - collision_vector_y, {hash("ground")})
			if ray then
				movement_vector.y = (ray.position.y + 32) - current_position.y
				stop_falling = true
				if state == STATE_FALL then
					state = STATE_RUN
					--movement_vector.x = facing
					go.cancel_animations(".", "position.x")
					local target_x
					if facing > 0 then
						target_x = math.ceil(current_position.x / 32) * 32
					else
						target_x = math.floor(current_position.x / 32) * 32
					end
					local duration = get_run_speed(math.abs(target_x - current_position.x))
					go.animate(".", "position.x", go.PLAYBACK_ONCE_FORWARD,target_x, go.EASING_LINEAR, duration)
					sprite.play_flipbook("#sprite", sprite_animations[facing].run)
					set_state_timer(duration, "run")
				end
			end
		end
	end
	current_position.y = current_position.y + movement_vector.y
	if stop_falling then
		movement_vector.y = 0
	end
	go.set(".", "position", current_position)
	update_lights()
	touching_ladder = false
end

function on_message(self, message_id, message, sender)
	if message_id == hash("collision_response") then
		if message.other_group == hash("ladder") then
			local x_coord = (current_position.x / 64) % 1
			if math.abs(x_coord - 0.5) < 0.1 then
				touching_ladder = true
			end
		end
	end
	if message_id == hash("trigger_response") then
		if message.other_group == hash("light_source") then
			local light_url = msg.url(nil, message.other_id, "light")
			if message.enter then
				local colour = go.get(light_url, "colour")
				local pos = go.get_world_position(message.other_id)
				table.insert(lights, {go = message.other_id, colour = colour, pos = pos})
			else
				for key, val in ipairs(lights) do
					if val.go == message.other_id then
						table.remove(lights, key)
						break
					end
				end
			end
		end
	end
end


function on_input(self, action_id, action)
	if action_id then
		INPUT[action_id] = not action.released
	end
end