local cam_target = vmath.vector3(0)

local FOLLOW, CUBE, MOUSE = hash("follow"), hash("cube"), hash("mouse")

local camera_mode = hash("follow")

function init(self)
	go.set("camera", "position.x", go.get_world_position("guy").x)
	go.set("camera", "position.y", go.get_world_position("guy").y)
	msg.post("@render:", "use_camera_projection")
	msg.post("camera", "acquire_camera_focus")
	msg.post(".", "acquire_input_focus")
	timer.delay(0.1, false, function()
		go.cancel_animations("camera", "position")
		go.set("camera", "position.x", 0)
		go.set("camera", "position.y", 0)
		camera_mode = CUBE
	end)
end

local function get_cursor_pos(x, y)
	return vmath.vector3(x, y, 0) * 0.4 * 2
end

function on_message(self, message_id, message, sender)
	if message_id == hash("spawn_cube") then

	elseif message_id == hash("set_tiles_for_cube") then
		for x = 29, 33 do
			tilemap.set_tile("#homeworld_01", "ground", x, -4, 14)
			tilemap.set_tile("#homeworld_01", "ground", x, -5, 13)
			tilemap.set_tile("#homeworld_01", "ground", x, -6, 12)
			tilemap.set_tile("#homeworld_01", "ground", x, -7, 11)
			tilemap.set_tile("#homeworld_01", "ground", x, -8, 2)
		end
	end
end

function update(self, dt)
	if camera_mode == FOLLOW then
		local cam_pos = go.get_world_position("camera")
		local guy_pos = go.get_world_position("guy")
		local diff_x = math.abs(cam_pos.x - guy_pos.x)
		diff_x = (480 - diff_x) / 256
		local diff_y = math.abs(cam_pos.y - guy_pos.y)
		diff_y = (320 - diff_y) / 2048
		go.animate("camera", "position.x", go.PLAYBACK_ONCE_FORWARD, go.get_world_position("guy").x, go.EASING_LINEAR, diff_x)
		go.animate("camera", "position.y", go.PLAYBACK_ONCE_FORWARD, go.get_world_position("guy").y, go.EASING_INSINE, diff_y)
	elseif camera_mode == MOUSE then
		local cam_pos = go.get_world_position("camera")
		local guy_pos = go.get_world_position("guy") + cam_target
		local diff_x = math.abs(cam_pos.x - guy_pos.x)
		diff_x = (480 - diff_x) / 256
		local diff_y = math.abs(cam_pos.y - guy_pos.y)
		diff_y = (320 - diff_y) / 2048
		go.animate("camera", "position.x", go.PLAYBACK_ONCE_FORWARD, guy_pos.x, go.EASING_LINEAR, diff_x)
		go.animate("camera", "position.y", go.PLAYBACK_ONCE_FORWARD, guy_pos.y, go.EASING_INSINE, diff_y)
	elseif camera_mode == CUBE then
		local limit_x, limit_y = 0, 0
		
		local guy_pos = go.get_world_position("guy")
		if guy_pos.x < limit_x then
			guy_pos.x = guy_pos.x + 320
			go.set_position(guy_pos, "guy")
			go.cancel_animations("guy", "position.x")
			msg.post("/cube_1/controller", hash("shift"), {dir = hash("left")})
		elseif guy_pos.x > (limit_x + 320) then
			guy_pos.x = guy_pos.x - 320
			go.set_position(guy_pos, "guy")
			go.cancel_animations("guy", "position.x")
			msg.post("/cube_1/controller", hash("shift"), {dir = hash("right")})
		end
		if guy_pos.y < limit_y then
			guy_pos.y = guy_pos.y + 320
			go.set_position(guy_pos, "guy")
			go.cancel_animations("guy", "position.y")
			msg.post("/cube_1/controller", hash("shift"), {dir = hash("down")})
		elseif guy_pos.y > (limit_y + 320) then
			guy_pos.y = guy_pos.y - 320
			go.set_position(guy_pos, "guy")
			go.cancel_animations("guy", "position.y")
			msg.post("/cube_1/controller", hash("shift"), {dir = hash("up")})
		end
		
		local pos_x = (guy_pos.x - limit_x - 160) / 160
		local pos_y = (guy_pos.y - limit_y - 160) / 160

		local player_pos = vmath.normalize(vmath.vector3(-pos_x, -pos_y, 1))

		local mod
		local dist_x = 1 - math.abs(pos_x)
		local dist_y = 1 - math.abs(pos_y)
		if dist_x == dist_y then
			mod = 0
		elseif dist_x > dist_y then
			mod = 15 * (1 - (dist_y / dist_x))
		else
			mod = -15 * (1 - (dist_x / dist_y))
		end
		local angle = (pos_x * pos_y) * math.rad(mod)
		local rotation_adjust = vmath.quat_rotation_z(angle)

		local rot_4 = vmath.quat_from_to(vmath.vector3(0, 0, 1), player_pos)
		
		go.set_rotation(rotation_adjust * rot_4, "cube/faces")
	end
end

function on_input(self, action_id, action)
	if not action_id and camera_mode == MOUSE then
		cam_target = vmath.vector3(action.x - 480, action.y - 320, 0)
	end
end