math.randomseed(os.time())

local FOLLOW, CUBE, CINEMA, FOLLOW_ENTER_CUBE_1 = hash("follow"), hash("cube"), hash("cinema"), hash("follow_enter_cube_1")
local camera_mode = FOLLOW

local object_list = {
	"/elevator/door",
	"/elevator/go",
	"/elevator/light",
	"/portal_machine/go",
	"/portal_machine/light_green",
	"/portal_machine/light_red",
	"/portal_machine/portal_part",
	"/portal_machine1/go",
	"/portal_machine1/light_green",
	"/portal_machine1/light_red",
	"/portal_machine1/portal_part",
	"/portal_machine2/go",
	"/portal_machine2/light_green",
	"/portal_machine2/light_red",
	"/portal_machine2/portal_part",
	"/portal_machine3/go",
	"/portal_machine3/light_green",
	"/portal_machine3/light_red",
	"/portal_machine3/portal_part",
	"/bridge",
	"/bridge1",
	"/bridge2",
	"/bridge3",
	"/bridge_dark",
	"/lamp_wide/go",
	"/lamp_wide/light_no_sprite",
	"/switch/go",
	"/switch/light_green",
	"/switch/light_red",
	"/switch_lab/go",
	"/switch_lab/light_green",
	"/switch_lab/light_red",
	"/console",
}
local object_list_spriteless = {
	"/screen_alignment/screen",
	"/screen_alignment1/screen",
	"/screen_cube"
}

local resize_timer

local function window_callback(self, event, data)
	if event == window.WINDOW_EVENT_RESIZED then
		if not resize_timer then
			resize_timer = timer.delay(0, false, function()
				local w, h = window.get_size()
				w = math.max(w, 1)
				h = math.max(h, 1)
				msg.post("@render:", hash("resized"), {w = w, h = h})
				msg.post("/guy", hash("screen_resized"), {w = w, h = h})
				resize_timer = nil
			end)
		end
	end
end

function init(self)
	window.set_listener(window_callback)
	go.set("camera", "position.x", go.get_world_position("guy").x)
	go.set("camera", "position.y", go.get_world_position("guy").y)
	msg.post("@render:", "use_camera_projection")
	msg.post("/shaker#camera", "acquire_camera_focus")
	msg.post(".", "acquire_input_focus")
	msg.post("lamp_wide/go", hash("disable"))
	msg.post("lamp_wide/light_no_sprite", hash("disable"))
	msg.post("laser", hash("disable"))
	msg.post("laser_2", hash("disable"))
	msg.post("light_entry_green", hash("disable"))
	go.set("laser", "scale", vmath.vector3(64 * 3, 0, 1))
	go.set("laser_2", "scale", vmath.vector3(64 * 2, 0, 1))
	go.set(msg.url(nil, "laser", "sprite"), "tint", vmath.vector4(1, 0, 0, 1))
	go.set(msg.url(nil, "laser_2", "sprite"), "tint", vmath.vector4(1, 0, 0, 1))
	msg.post("light_entry", hash("disable"))
	msg.post("bridge#co", hash("disable"))
	go.set("bridge", "scale.x", 0)
	go.set("/cube_1/controller#cube_tilemap_controller", "offset_x", 320)
	go.set("/cube_1/controller#cube_tilemap_controller", "offset_y", 2560)
end

local function get_cursor_pos(x, y)
	return vmath.vector3(x, y, 0) * 0.4 * 2
end

local alignment_screens = {}
local aligned_count = 2


local limit_x, limit_y = 0, 0

local function shake_camera(duration, max_magnitude, mag_increase, direction)
	local sign = 1
	local mod = 0.1
	local increase = true
	local function shake()
		sign = -sign
		local mag = math.random() * 5 * sign * mod
		if increase then 
			mod = math.min(mod + mag_increase, max_magnitude)
		else
			mod = math.max(mod - mag_increase, 0.1)
		end
		go.animate("/shaker", direction, go.PLAYBACK_ONCE_FORWARD, mag, go.EASING_LINEAR, 0.02 * math.random() * (1 / mod), 0, shake)
	end

	shake()
	timer.delay(duration * 0.5, false, function() increase = false end)
	timer.delay(duration, false, function()
		go.cancel_animations("/shaker", direction)
	end)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("setup_cube_arrival_tiles") then
		local tilemap_url = "/cube_1/go3#cube_1_left"
		for x = 1, 5 do
			for y = 1, 5 do
				tilemap.set_tile("/tilemap#homeworld_01", "ground", x, y, tilemap.get_tile(tilemap_url, "ground", x, y))
			end
		end
	elseif message_id == hash("alignment_screen_init") then
		table.insert(alignment_screens, sender)
	elseif message_id == hash("portal_part_aligned") then
		for key, val in ipairs(alignment_screens) do
			msg.post(val, message.position)
		end
		aligned_count = aligned_count + 1
		if aligned_count > 3 then
			sprite.play_flipbook("/console#sprite", "console_ready")
			go.set("/switch_lab/go#switch", "turned_on", false)
			go.set("/switch_lab/go#switch", "script", hash("spawn_cube"))
		end
	elseif message_id == hash("alignment_check") then
		for key, val in ipairs(alignment_screens) do
			msg.post(val, hash("screen_on"))
		end
	elseif message_id == hash("camera_cube_arrival") then
		local function explode_tiles()
			for x = 1, 5 do
				for y = 1, 5 do
					factory.create("/tilemap#spawn_tile", vmath.vector3(x * 64, y * 64, 0), nil, {close = (x == 1 and y == 2)})
					tilemap.set_tile("/tilemap#homeworld_01", "ground", x, y, 0)
				end
			end
		end
		camera_mode = CINEMA
		go.animate("camera", "position.x", go.PLAYBACK_ONCE_FORWARD, -768, go.EASING_INSINE, 6)
		go.animate("camera", "position.y", go.PLAYBACK_ONCE_FORWARD, 128, go.EASING_INSINE, 6)
		go.animate("camera", "euler.y", go.PLAYBACK_ONCE_FORWARD, -45, go.EASING_INSINE, 6)
		timer.delay(2, false, function()
			shake_camera(3, 4, 0.02, "position.y")
			sound.play("/sound#earthquake")
		end)
		timer.delay(4.15, false, function()
			explode_tiles()
			shake_camera(1.5, 8, 0.3, "position.x")
			sound.play("/sound#cube_impact")
		end)
		timer.delay(4.5, false, function()
			msg.post("/cube/controller", hash("spawn"))
			sound.stop("/sound#reactor_loop")
			sprite.play_flipbook("/screen_cube#sprite", "noise_large")
			msg.post("/lamp_wide/go", hash("disable"))
			go.set("/lamp_wide/light_no_sprite#sprite", "tint", vmath.vector4(0.5, 0, 0, 1))
			go.set("/screen_cube#light", "tint", vmath.vector4(0.5, 0, 0, 1))
			for key, val in ipairs(alignment_screens) do
				msg.post(val, hash("screen_off"))
			end
			msg.post("@render:", hash("set_ambient_light"), {light = vmath.vector4(0.05)})
		end)
		timer.delay(7.5, false, function()
			go.animate("/bridge", "scale.x", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_INSINE, 2)
			sound.play("/sound#bridge_extend_longer")
		end)
		timer.delay(8.5, false, function()
			camera_mode = FOLLOW_ENTER_CUBE_1
			msg.post("/bridge#co", hash("enable"))
			msg.post("/door_lab_2", hash("switch_mode"), {mode = hash("lock"), state = hash("open")})
		end)
	elseif message_id == hash("camera_mode_cube") then
		shake_camera(0.5, 4, 0.4, "position.y")
		limit_x, limit_y = message.x, message.y
		camera_mode = CUBE
		go.animate("camera", "position.x", go.PLAYBACK_ONCE_FORWARD, 160, go.EASING_INSINE, 3)
		go.animate("camera", "position.y", go.PLAYBACK_ONCE_FORWARD, 160, go.EASING_INSINE, 3)
		go.animate("camera", "euler.y", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_INSINE, 3)
		timer.delay(3, false, function()
			msg.post("/cube/controller", hash("animate_z"))
		end)
		local fade_time = 20
		local fade_distance = -2500
		go.animate("tilemap", "position.z", go.PLAYBACK_ONCE_FORWARD, fade_distance, go.EASING_INSINE, fade_time)
		go.animate("tilemap#homeworld_01", "tint", go.PLAYBACK_ONCE_FORWARD, vmath.vector4(0, 0, 0, 0), go.EASING_INSINE, fade_time)
		for key, val in ipairs(object_list) do
			go.animate(val, "position.z", go.PLAYBACK_ONCE_FORWARD, fade_distance, go.EASING_INSINE, fade_time)
			go.animate(val.."#sprite", "tint", go.PLAYBACK_ONCE_FORWARD, vmath.vector4(0, 0, 0, 0), go.EASING_INSINE, fade_time, 0, function()
				go.delete(val)
			end)
		end
		for key, val in ipairs(object_list_spriteless) do
			go.animate(val, "position.z", go.PLAYBACK_ONCE_FORWARD, fade_distance, go.EASING_INSINE, fade_time, 0, function()
				go.delete(val)
			end)
		end
	elseif message_id == hash("earthquake") then
		shake_camera(3, 1.5, 0.03, "position.x")
		sound.play("/sound#earthquake")
	end
end

function update(self, dt)
	if camera_mode == FOLLOW then
		local cam_pos = go.get_world_position("camera")
		local guy_pos = go.get_world_position("guy")
		local diff_x = math.abs(cam_pos.x - guy_pos.x)
		diff_x = (480 - diff_x) / 256
		local diff_y = math.abs(cam_pos.y - guy_pos.y)
		diff_y = (320 - diff_y) / 2048
		go.animate("camera", "position.x", go.PLAYBACK_ONCE_FORWARD, go.get_world_position("guy").x, go.EASING_LINEAR, diff_x)
		go.animate("camera", "position.y", go.PLAYBACK_ONCE_FORWARD, go.get_world_position("guy").y, go.EASING_INSINE, diff_y)
	elseif camera_mode == CUBE then
		local guy_pos = go.get_world_position("guy")
		if guy_pos.x < limit_x then
			guy_pos.x = guy_pos.x + 320
			go.set_position(guy_pos, "guy")
			go.cancel_animations("guy", "position.x")
			msg.post("/cube_1/controller", hash("shift"), {dir = hash("left")})
		elseif guy_pos.x > (limit_x + 320) then
			guy_pos.x = guy_pos.x - 320
			go.set_position(guy_pos, "guy")
			go.cancel_animations("guy", "position.x")
			msg.post("/cube_1/controller", hash("shift"), {dir = hash("right")})
		end
		if guy_pos.y < limit_y then
			guy_pos.y = guy_pos.y + 320
			go.set_position(guy_pos, "guy")
			go.cancel_animations("guy", "position.y")
			msg.post("/cube_1/controller", hash("shift"), {dir = hash("down")})
		elseif guy_pos.y > (limit_y + 320) then
			guy_pos.y = guy_pos.y - 320
			go.set_position(guy_pos, "guy")
			go.cancel_animations("guy", "position.y")
			msg.post("/cube_1/controller", hash("shift"), {dir = hash("up")})
		end
		
		local pos_x = (guy_pos.x - limit_x - 160) / 160
		local pos_y = (guy_pos.y - limit_y - 160) / 160

		local player_pos = vmath.normalize(vmath.vector3(-pos_x, -pos_y, 1))

		local mod
		local dist_x = 1 - math.abs(pos_x)
		local dist_y = 1 - math.abs(pos_y)
		if dist_x == dist_y then
			mod = 0
		elseif dist_x > dist_y then
			mod = 15 * (1 - (dist_y / dist_x))
		else
			mod = -15 * (1 - (dist_x / dist_y))
		end
		local angle = (pos_x * pos_y) * math.rad(mod)
		local rotation_adjust = vmath.quat_rotation_z(angle)

		local rot_4 = vmath.quat_from_to(vmath.vector3(0, 0, 1), player_pos)
		
		go.set_rotation(rotation_adjust * rot_4, "cube/faces")
	elseif camera_mode == FOLLOW_ENTER_CUBE_1 then
		local dist = (go.get_world_position("/guy").x + 180) / 660
		dist = math.max(dist, 0)
		if dist > 1 then
			go.delete("/trigger_from_cube_1")
			go.delete("/trigger_teleport_to_cube_1")
			msg.post("#", hash("camera_mode_cube"), {x = 320, y = 2560})
		else
			dist = dist * dist * dist
			go.set("camera", "euler.y", -45 * (1 - dist))
			go.set("camera", "position.x", -768 + (928 * dist))
			go.set("camera", "position.y", 128 + (32 * dist))
		end
	end
end