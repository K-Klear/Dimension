go.property("close", false)

function init(self)
	local function get_rand()
		return (math.random() * 0.3) + 0.6
	end
	if self.close then
		local vec = go.get_world_position("/camera")
		vec.x = vec.x - 120
		self.motion_vector = vmath.normalize(vec - go.get_world_position())
	else
		self.motion_vector = vmath.normalize(go.get_world_position() - vmath.vector3(160 * get_rand(), 160 * get_rand(), -70 * get_rand()))
	end
	local other_vec = go.get_world_position() - vmath.vector3(160 * get_rand(), 160 * get_rand(), 0)
	local quat_axis = vmath.normalize(vmath.cross(self.motion_vector, other_vec))
	self.quat = vmath.quat_axis_angle(quat_axis, math.rad(1.75 * get_rand()))
	if self.close then
		self.motion_vector = self.motion_vector * 1.3
	else
		self.motion_vector = self.motion_vector * get_rand()
	end
	self.rotation = go.get_world_rotation()
	self.position = go.get_world_position()
end

function update(self, dt)
	self.rotation = self.rotation * self.quat
	self.position = self.position + self.motion_vector * dt * 320
	go.set_rotation(self.rotation)
	go.set_position(self.position)
end