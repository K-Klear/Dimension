local cube_size = 5
local cube_left_x, cube_left_y = 0, 40
local cube_front_x, cube_front_y = 5, 40
local cube_right_x, cube_right_y = 10, 40
local cube_top_x, cube_top_y = 5, 45
local cube_bottom_x, cube_bottom_y = 5, 35

local ambient_light = vmath.vector4(0.1)

local NORMAL_RT, LIGHT_RT
local CUBE_FRONT_RT, CUBE_LEFT_RT, CUBE_RIGHT_RT, CUBE_TOP_RT, CUBE_BOTTOM_RT

--
-- projection that centers content with maintained aspect ratio and optional zoom
--
local function fixed_projection(near, far, zoom)
    local projected_width = render.get_window_width() / (zoom or 1)
    local projected_height = render.get_window_height() / (zoom or 1)
    local xoffset = -(projected_width - render.get_width()) / 2
    local yoffset = -(projected_height - render.get_height()) / 2
    return vmath.matrix4_orthographic(xoffset, xoffset + projected_width, yoffset, yoffset + projected_height, near, far)
end
--
-- projection that centers and fits content with maintained aspect ratio
--
local function fixed_fit_projection(near, far)
    local width = render.get_width()
    local height = render.get_height()
    local window_width = render.get_window_width()
    local window_height = render.get_window_height()
    local zoom = math.min(window_width / width, window_height / height)
    return fixed_projection(near, far, zoom)
end
--
-- projection that stretches content
--
local function stretch_projection(near, far)
    return vmath.matrix4_orthographic(0, render.get_width(), 0, render.get_height(), near, far)
end

local function get_projection(self)
    return self.projection_fn(self.near, self.far, self.zoom)
end

local function create_render_targets(w, h)
    local color_params = {
        format = render.FORMAT_RGBA,
        width = w,
        height = h,
        min_filter = render.FILTER_LINEAR,
        mag_filter = render.FILTER_LINEAR,
    }

    local depth_params = {
        format = render.FORMAT_DEPTH,
        width = w,
        height = h,
    }
    CUBE_FRONT_RT = render.render_target("cube_front_rt", {[render.BUFFER_COLOR_BIT] = color_params, [render.BUFFER_DEPTH_BIT] = depth_params})
    CUBE_LEFT_RT = render.render_target("cube_left_rt", {[render.BUFFER_COLOR_BIT] = color_params, [render.BUFFER_DEPTH_BIT] = depth_params})
    CUBE_RIGHT_RT = render.render_target("cube_right_rt", {[render.BUFFER_COLOR_BIT] = color_params, [render.BUFFER_DEPTH_BIT] = depth_params})
    CUBE_TOP_RT = render.render_target("cube_top_rt", {[render.BUFFER_COLOR_BIT] = color_params, [render.BUFFER_DEPTH_BIT] = depth_params})
    CUBE_BOTTOM_RT = render.render_target("cube_bottom_rt", {[render.BUFFER_COLOR_BIT] = color_params, [render.BUFFER_DEPTH_BIT] = depth_params})
    
    NORMAL_RT = render.render_target("normal", {[render.BUFFER_COLOR_BIT] = color_params, [render.BUFFER_DEPTH_BIT] = depth_params})
    LIGHT_RT = render.render_target("light", {[render.BUFFER_COLOR_BIT] = color_params, [render.BUFFER_DEPTH_BIT] = depth_params})
end

function init(self)
    self.tile_pred = render.predicate({"tile"})
    self.gui_pred = render.predicate({"gui"})
    self.text_pred = render.predicate({"text"})
    self.particle_pred = render.predicate({"particle"})
    self.model_pred = render.predicate({"model"})
    self.tilemap_pred = render.predicate({"tilemap"})
    self.light_pred = render.predicate({"light"})
    self.quad_pred = render.predicate({"quad"})

    self.cube_front_pred = render.predicate({"cube_front"})
    self.cube_left_pred = render.predicate({"cube_left"})
    self.cube_right_pred = render.predicate({"cube_right"})
    self.cube_top_pred = render.predicate({"cube_top"})
    self.cube_bottom_pred = render.predicate({"cube_bottom"})
    
    self.clear_color = vmath.vector4(0, 0, 0, 0)
    self.clear_color.x = sys.get_config("render.clear_color_red", 0)
    self.clear_color.y = sys.get_config("render.clear_color_green", 0)
    self.clear_color.z = sys.get_config("render.clear_color_blue", 0)
    self.clear_color.w = sys.get_config("render.clear_color_alpha", 0)

    self.view = vmath.matrix4()

    self.near = -1
    self.far = 1
    self.projection_fn = stretch_projection

    create_render_targets(render.get_width(), render.get_height())
end

function update(self)
    render.set_depth_mask(true)
    render.set_stencil_mask(0xff)

    render.disable_state(render.STATE_DEPTH_TEST)
    render.disable_state(render.STATE_STENCIL_TEST)
    
    render.enable_state(render.STATE_BLEND)
    render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
    render.disable_state(render.STATE_CULL_FACE)

    render.set_viewport(0, 0, render.get_window_width(), render.get_window_height())

    local proj = vmath.matrix4_orthographic(cube_left_x * 64, (cube_left_x + cube_size) * 64, cube_left_y * 64, (cube_left_y + cube_size) * 64, -1, 1)
    render.set_projection(proj)
    render.set_view(vmath.matrix4())

    render.set_render_target(CUBE_LEFT_RT)
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})
    render.draw(self.tilemap_pred)
    render.draw(self.tile_pred)

    proj = vmath.matrix4_orthographic(cube_front_x * 64, (cube_front_x + cube_size) * 64, cube_front_y * 64, (cube_front_y + cube_size) * 64, -1, 1)
    render.set_projection(proj)
    render.set_render_target(CUBE_FRONT_RT)
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})
    render.draw(self.tilemap_pred)
    render.draw(self.tile_pred)

    proj = vmath.matrix4_orthographic(cube_right_x * 64, (cube_right_x + cube_size) * 64, cube_right_y * 64, (cube_right_y + cube_size) * 64, -1, 1)
    render.set_projection(proj)
    render.set_render_target(CUBE_RIGHT_RT)
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})
    render.draw(self.tilemap_pred)
    render.draw(self.tile_pred)

    proj = vmath.matrix4_orthographic(cube_top_x * 64, (cube_top_x + cube_size) * 64, cube_top_y * 64, (cube_top_y + cube_size) * 64, -1, 1)
    render.set_projection(proj)
    render.set_render_target(CUBE_TOP_RT)
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})
    render.draw(self.tilemap_pred)
    render.draw(self.tile_pred)

    proj = vmath.matrix4_orthographic(cube_bottom_x * 64, (cube_bottom_x + cube_size) * 64, cube_bottom_y * 64, (cube_bottom_y + cube_size) * 64, -1, 1)
    render.set_projection(proj)
    render.set_render_target(CUBE_BOTTOM_RT)
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})
    render.draw(self.tilemap_pred)
    render.draw(self.tile_pred)

    render.set_view(self.view)
    render.set_projection(get_projection(self))
    render.enable_state(render.STATE_DEPTH_TEST)

    render.set_render_target(NORMAL_RT)
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})
    render.draw(self.tilemap_pred)    -- disable this when only on cube
    render.draw(self.tile_pred)
    render.draw_debug3d()

    render.enable_texture(0, CUBE_FRONT_RT, render.BUFFER_COLOR_BIT)
    render.draw(self.cube_front_pred)
    render.disable_texture(0, CUBE_FRONT_RT)
    render.enable_texture(0, CUBE_LEFT_RT, render.BUFFER_COLOR_BIT)
    render.draw(self.cube_left_pred)
    render.disable_texture(0, CUBE_LEFT_RT)
    render.enable_texture(0, CUBE_RIGHT_RT, render.BUFFER_COLOR_BIT)
    render.draw(self.cube_right_pred)
    render.disable_texture(0, CUBE_RIGHT_RT)
    render.enable_texture(0, CUBE_TOP_RT, render.BUFFER_COLOR_BIT)
    render.draw(self.cube_top_pred)
    render.disable_texture(0, CUBE_TOP_RT)
    render.enable_texture(0, CUBE_BOTTOM_RT, render.BUFFER_COLOR_BIT)
    render.draw(self.cube_bottom_pred)
    render.disable_texture(0, CUBE_BOTTOM_RT)

    render.disable_state(render.STATE_DEPTH_TEST)
    render.set_render_target(LIGHT_RT)
    render.clear({[render.BUFFER_COLOR_BIT] = ambient_light, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})
    render.draw(self.light_pred)

    render.set_render_target(render.RENDER_TARGET_DEFAULT)
    render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})

    render.set_view(vmath.matrix4())
    render.set_projection(vmath.matrix4())

    render.enable_texture(0, NORMAL_RT, render.BUFFER_COLOR_BIT)
    render.enable_texture(1, LIGHT_RT, render.BUFFER_COLOR_BIT)
    render.draw(self.quad_pred)
    render.disable_texture(1, LIGHT_RT)
    render.disable_texture(0, NORMAL_RT)

    -- render GUI
    --
    
    render.set_view(vmath.matrix4())
    render.set_projection(vmath.matrix4_orthographic(0, render.get_window_width(), 0, render.get_window_height(), -1, 1))
    
    render.enable_state(render.STATE_STENCIL_TEST)
    render.draw(self.gui_pred)
    render.draw(self.text_pred)
    render.disable_state(render.STATE_STENCIL_TEST)
end

function on_message(self, message_id, message)
    if message_id == hash("clear_color") then
        self.clear_color = message.color
    elseif message_id == hash("set_view_projection") then
        self.view = message.view
        self.projection = message.projection
    elseif message_id == hash("use_camera_projection") then
        self.projection_fn = function() return self.projection or vmath.matrix4() end
    elseif message_id == hash("use_stretch_projection") then
        self.near = message.near or -1
        self.far = message.far or 1
        self.projection_fn = stretch_projection
    elseif message_id == hash("use_fixed_projection") then
        self.near = message.near or -1
        self.far = message.far or 1
        self.zoom = message.zoom or 1
        self.projection_fn = fixed_projection
    elseif message_id == hash("use_fixed_fit_projection") then
        self.near = message.near or -1
        self.far = message.far or 1
        self.projection_fn = fixed_fit_projection
    elseif message_id == hash("resized") then
        create_render_targets(message.w, message.h)
    elseif message_id == hash("setup_cube") then
        cube_size = cube_size or message.cube_size
        cube_left_x = message.left_x or cube_left_x
        cube_left_y = message.left_y or cube_left_y
    elseif message_id == hash("set_ambient_light") then
        ambient_light = message.light
    end
end
