local lights = {}
local dynamic_light_count = 0
local buttons = {}
local no_colour = vmath.vector4(0)

local ACCELERATION_X = 0.7
local MAX_SPEED_X = 5
local ACCELERATION_Y = 1
local MAX_SPEED_Y = -8
local DECCELERATION_X = 0.5
local JUMP_SPEED = 16
local CLIMB_SPEED = 2

local facing = 1
local current_position
local touching_ladder = false
local update_fn, update_default

local current_animation = "stand"
local current_anim_facing = facing

local GRAVITY = 0.5

local collision_vector_x = vmath.vector3(28, 0, 0)
local collision_vector_y = vmath.vector3(0, 28, 0)

local movement_vector = vmath.vector3(0, 0, 0)

local INPUT = {}

local half_screen_w, half_screen_h = 480, 320

local sprite_animations = {
	[1] = {run = "run_right", stand = "stand_right", jump = "jump_right", turn = "turn_right", climb = "climb_right", ladder = "ladder"},
	[-1] = {run = "run_left", stand = "stand_left", jump = "jump_left", turn = "turn_left", climb = "climb_left", ladder = "ladder"}
}

local function get_run_speed(distance)
	return distance / 256
end

function init(self)
	update_fn = update_default
	msg.post(".", "acquire_input_focus")
	current_position = go.get_world_position()
end

local function update_lights()
	local pos = go.get_world_position("camera")
	if dynamic_light_count > 0 then
		for key, val in ipairs(lights) do
			val.pos = go.get_world_position(val.go)
		end
	end
	if #lights > 2 then
		table.sort(lights, function(a, b) return vmath.length_sqr(pos - a.pos) < vmath.length_sqr(pos - b.pos) end)
	end
	local light_dir = vmath.vector4()
	if lights[1] then
		go.set("#sprite", "light_col_1", lights[1].colour)
		light_dir.x = lights[1].pos.x - pos.x + half_screen_w
		light_dir.y = lights[1].pos.y - pos.y + half_screen_h
		if lights[2] then
			go.set("#sprite", "light_col_2", lights[2].colour)
			light_dir.z = lights[2].pos.x - pos.x + half_screen_w
			light_dir.w = lights[2].pos.y - pos.y + half_screen_h
		end
	else
		go.set("#sprite", "light_col_1", no_colour)
	end
	go.set("#sprite", "light_direction", light_dir)
end

local function play_anim(anim)
	if not (anim == current_animation and current_anim_facing == facing) then
		sprite.play_flipbook("#sprite", sprite_animations[facing][anim])
		current_animation = anim
		current_anim_facing = facing
	end
end

function update_default(self)
	current_position = go.get_world_position(".")
	local block_left, block_right, block_up, touching_ground
	local ray
	ray = physics.raycast(current_position + movement_vector, current_position + movement_vector + vmath.vector3(28, 6, 0), {hash("ground")})
	if ray then
		current_position.x = ray.position.x - collision_vector_x.x
		block_right = true
		movement_vector.x = math.min(0, movement_vector.x)
	else
		ray = physics.raycast(current_position + movement_vector, current_position + movement_vector + vmath.vector3(28, -6, 0), {hash("ground")})
		if ray then
			current_position.x = ray.position.x - collision_vector_x.x
			block_right = true
			movement_vector.x = math.min(0, movement_vector.x)
		end
	end
	ray = physics.raycast(current_position + movement_vector, current_position + movement_vector + vmath.vector3(-28, 6, 0), {hash("ground")})
	if ray then
		current_position.x = ray.position.x + collision_vector_x.x
		block_left = true
		movement_vector.x = math.max(0, movement_vector.x)
	else
		ray = physics.raycast(current_position + movement_vector, current_position + movement_vector + vmath.vector3(-28, -6, 0), {hash("ground")})
		if ray then
			current_position.x = ray.position.x + collision_vector_x.x
			block_left = true
			movement_vector.x = math.max(0, movement_vector.x)
		end
	end

	ray = physics.raycast(current_position + movement_vector, current_position + movement_vector - vmath.vector3(20, 32, 0), {hash("ground")})
	if ray then
		touching_ground = ray.position.y
	end
	ray = physics.raycast(current_position + movement_vector, current_position + movement_vector - vmath.vector3(-20, 32, 0), {hash("ground")})
	if ray then
		touching_ground = math.max(ray.position.y, touching_ground or -1/0)
	end

	if touching_ladder and not (movement_vector.y > 0) then
		movement_vector.y = 0
	elseif touching_ground and not touching_ladder then
		current_position.y = touching_ground + collision_vector_y.y
		movement_vector.y = 0
	else
		movement_vector.y = math.max(MAX_SPEED_Y, movement_vector.y - ACCELERATION_Y)
	end

	ray = physics.raycast(current_position + movement_vector, current_position + movement_vector + vmath.vector3(18, 28 + JUMP_SPEED, 0), {hash("ground")})
	if ray then
		block_up = ray.position.y
	end
	ray = physics.raycast(current_position + movement_vector, current_position + movement_vector + vmath.vector3(-18, 28 + JUMP_SPEED, 0), {hash("ground")})
	if ray then
		block_up = math.min(ray.position.y, block_up or 1/0)
	end

	if block_up and (current_position.y + movement_vector.y + 28 > block_up) and movement_vector.y > 0 then
		current_position.y = block_up - collision_vector_y.y
		movement_vector.y = 0
	end

	if INPUT[hash("key_left")] and not block_left then
		movement_vector.x = math.max(movement_vector.x - ACCELERATION_X, -MAX_SPEED_X)
		facing = -1
	elseif INPUT[hash("key_right")] and not block_right then
		movement_vector.x = math.min(movement_vector.x + ACCELERATION_X, MAX_SPEED_X)
		facing = 1
	end

	if touching_ladder then
		if INPUT[hash("key_up")] and not block_up then
			movement_vector.y = CLIMB_SPEED
		elseif INPUT[hash("key_down")] and not touching_ground then
			movement_vector.y = -CLIMB_SPEED
		end
	else
		if INPUT[hash("key_up")] and touching_ground and not block_up then
			movement_vector.y = JUMP_SPEED
		end
	end

	if touching_ground and not (movement_vector.x == 0) then
		play_anim("run")
	elseif touching_ladder and not (movement_vector.y == 0) then
		play_anim("ladder")
	else
		play_anim("stand")
	end

	go.set(".", "position", current_position + movement_vector)

	if movement_vector.x > DECCELERATION_X then
		movement_vector.x = movement_vector.x - DECCELERATION_X
	elseif movement_vector.x < -DECCELERATION_X then
		movement_vector.x = movement_vector.x + DECCELERATION_X
	else
		movement_vector.x = 0
	end
end

function update(self, dt)
	update_fn(self)
	update_lights()
	touching_ladder = false
end

function on_message(self, message_id, message, sender)
	if message_id == hash("collision_response") then
		if message.other_group == hash("ladder") then
			--local x_coord = (current_position.x / 64) % 1
			--if math.abs(x_coord - 0.5) < 0.1 then
			--	touching_ladder = true
			--end
			touching_ladder = true
		end
	elseif message_id == hash("trigger_response") then
		if message.other_group == hash("light_source") then
			local light_url = msg.url(nil, message.other_id, "light")
			local is_dynamic = go.get(light_url, "dynamic")
			if message.enter then
				local colour = go.get(light_url, "colour")
				local pos = go.get_world_position(message.other_id)
				table.insert(lights, {go = message.other_id, colour = colour, pos = pos})
				if is_dynamic then
					dynamic_light_count = dynamic_light_count + 1
				end
			else
				for key, val in ipairs(lights) do
					if val.go == message.other_id then
						table.remove(lights, key)
						break
					end
				end
				if is_dynamic then
					dynamic_light_count = dynamic_light_count - 1
				end
			end
		elseif message.other_group == hash("button") then
			if message.enter then
				buttons[message.other_id] = true
			else
				buttons[message.other_id] = nil
			end
		end
	elseif message_id == hash("stop") then
		play_anim(message.anim or "stand")
		update_fn = function() end
	elseif message_id == hash("start") then
		update_fn = update_default
	elseif message_id == hash("screen_resized") then
		half_screen_w = message.w * 0.5
		half_screen_h = message.h * 0.5
	end
end

function on_input(self, action_id, action)
	if action_id then
		if action_id == hash("use") then
			local active_button = next(buttons)
			if active_button then
				msg.post(active_button, hash("pressed"))
			end
		else
			INPUT[action_id] = not action.released
		end
	end
end